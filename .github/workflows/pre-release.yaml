name: Pre-release

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.semver.outputs.next }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Get Next Version
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fallbackTag: 1.0.0
          majorList: major
          noNewCommitBehavior: current

      - name: Install Cargo Workspaces
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-workspaces

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'

      - name: Bump Cargo Version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cargo workspaces version custom ${{ steps.semver.outputs.nextStrict }} --no-individual-tags --yes

  build-programs:
    needs: version
    if: needs.version.outputs.version != ''
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Install yq
        run: sudo snap install yq

      - name: Set up Docker
        uses: docker/setup-docker-action@v4

      - name: Install Rust Stable
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install Solana Verify
        uses: baptiste0928/cargo-install@v3
        with:
          crate: solana-verify

      - name: Build Solana Programs
        run: |
          mkdir -p target/deploy
          for program_dir in programs/*/; do
            if [ -f "${program_dir}Cargo.toml" ]; then
              library_name=$(yq -oy '.lib.name' "${program_dir}Cargo.toml")
              if [[ ! $library_name =~ "test" ]]; then
                solana-verify build --library-name ${library_name} -- --features mainnet
              fi
            fi
          done

      - name: Upload Program Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: solana-programs
          path: target/deploy/*.so
          retention-days: 1

  release:
    needs: [version, build-programs]
    if: needs.version.outputs.version != ''
    permissions:
      contents: write 
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: macos-14
            target: x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v4
        with:
            ref: ${{ github.ref }}
            fetch-depth: 0

      - uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        if: contains(runner.os, 'linux')
        with:
          packages: jq pkg-config build-essential libudev-dev libssl-dev
          version: 1.0

      - name: Install yq on Linux
        if: contains(runner.os, 'linux')
        run: |
          sudo snap install yq

      - name: Get version information
        id: versions
        run: |
          # Add pre suffix for push triggers
          echo "version=${{ needs.version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "solana_version=$(yq -oy '.workspace.dependencies."solana-sdk".version' Cargo.toml)" >> $GITHUB_OUTPUT
          echo "anchor_rev=$(yq -oy '.workspace.dependencies."anchor-lang".rev' Cargo.toml)" >> $GITHUB_OUTPUT
          echo "rust_version=$(yq -oy '.toolchain.channel' rust-toolchain.toml)" >> $GITHUB_OUTPUT
          echo "commit_full=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Install Rust Stable to use with tools
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Download Solana Programs
        uses: actions/download-artifact@v4
        with:
          name: solana-programs
          path: staging/lib

      - name: Build workspace and programs
        run: |
          source "$HOME/.cargo/env"
          if [[ "${{ matrix.os }}" == "macos-"* ]]; then
            source "$HOME/.bash_profile"
          else
            source "$HOME/.profile"
          fi

          mkdir -p staging/bin
          cargo build --workspace --release --target ${{ matrix.target }} --features mainnet

          if [[ "${{ matrix.target }}" == *"darwin"* ]]; then
            install -m 644 target/${{ matrix.target }}/release/libantegen_client_geyser.dylib staging/lib/libantegen_client_geyser.so
            install -m 755 target/${{ matrix.target }}/release/antegen staging/bin/
          else
            install -m 644 target/${{ matrix.target }}/release/libantegen_client_geyser.so staging/lib/
            install -m 755 target/${{ matrix.target }}/release/antegen staging/bin/
          fi

          cat > staging/version.yml << EOF
          version: ${{ steps.versions.outputs.version }}
          commit: ${{ steps.versions.outputs.commit_full }}
          target: ${{ matrix.target }}
          EOF

          # Create archive
          cd staging
          tar -cJf ../antegen-${{ steps.versions.outputs.version }}-${{ matrix.target }}.tar.xz *

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2.2.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: true
          tag_name: ${{ steps.versions.outputs.version }}
          prerelease: true
          body: |
            # 🚀 Release Details

            ### 🔌 Plugin Version
            - antegen-geyser-plugin `${{ steps.versions.outputs.version }}`

            ### ⚡ Runtime Versions
            - 🌟 Solana `${{ steps.versions.outputs.solana_version }}`
            - 🦀 Rust `${{ steps.versions.outputs.rust_version }}`
            - ⚓️ Anchor `${{ steps.versions.outputs.anchor_rev }}`

            ---
            📝 For documentation, visit [docs.antegen.xyz](https://docs.antegen.xyz)
          files: |
            antegen-${{ steps.versions.outputs.version }}*
